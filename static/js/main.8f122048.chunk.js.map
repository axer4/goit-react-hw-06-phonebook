{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactForm/ContactFrom.js","components/ContactList/ContactList.js","redux/actions.js","components/Filter/Filter.js","App.js","redux/store.js","index.js","components/ContactList/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","className","styles","form","type","name","pattern","title","required","onChange","this","props","onChangeInputHandler","input","button","onClick","addContactHandler","Component","connect","state","contacts","dispatch","filteredContacts","deleteContact","list","map","contact","item","number","id","addContact","createAction","payload","uuidv4","contactsFilter","value","filter","e","target","label","heading","autoComplete","contactsArr","useState","setName","setNumber","dublicateAlert","find","toLowerCase","alert","length","includes","event","persistConfig","key","storage","contactsList","createReducer","_","persistedReducer","persistReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"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","file":"static/js/main.8f122048.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1iwXo\",\"item\":\"ContactList_item__1E9dx\",\"button\":\"ContactList_button__XSUAL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Filter_heading__2lSXg\",\"input\":\"Filter_input__1avd6\",\"label\":\"Filter_label__3YMos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"App_heading__1GyyW\"};","import { Component } from \"react\";\r\nimport styles from './ContactForm.module.css'\r\nimport PropTypes from 'prop-types';\r\nexport default class ContactForm extends Component {\r\n  render() {\r\n    return <>\r\n          <form className = {styles.form}>\r\n        <label>\r\n      <h3>Name</h3>\r\n      <input\r\n  type=\"text\"\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n            onChange={this.props.onChangeInputHandler}\r\n            className = {styles.input}\r\n      /></label>\r\n               <label>\r\n          <h3>Tel. number </h3>\r\n          <input\r\n  type=\"tel\"\r\n  name=\"number\"\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            \r\n            required\r\n            onChange={this.props.onChangeInputHandler}\r\n            className = {styles.input}\r\n          /></label>\r\n        <button type=\"button\" className={styles.button} onClick={this.props.addContactHandler}>Add Contact</button>\r\n      </form></>\r\n} }\r\n\r\nContactForm.propTypes = {\r\n  addContactHandler: PropTypes.func,\r\n  onChangeInputHandler: PropTypes.func,\r\n}","import styles from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nfunction ContactList({ contacts, filteredContacts, deleteContact }) {\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('contacts', JSON.stringify(contacts))\r\n    // });\r\n    return (<ul className={styles.list}>\r\n        {\r\n             filteredContacts.map(contact => <li key={contact.id} className={styles.item}>{contact.name} : {contact.number} \r\n                    <button onClick={() => deleteContact(contact.id)} className={styles.button}> Delete </button>\r\n            </li>)\r\n            \r\n            }\r\n    </ul> )\r\n}\r\n\r\nContactList.propTypes = {\r\n    filteredContacts: PropTypes.array,\r\n    deleteContact: PropTypes.func\r\n}\r\nconst mapDispatchTopProps = dispatch => {\r\n    return {\r\n    \r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n      contacts: state.contacts,\r\n  }\r\n}\r\n    \r\nexport default connect(mapStateToProps,mapDispatchTopProps)(ContactList);\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// export const addContact = (name, number) => ({\r\n//     type: \"addContact\",\r\n//     payload: {\r\n//         name: name,\r\n//         number: number,\r\n//         id: uuidv4(),\r\n//     },\r\n// });\r\n// export const deleteContact = value => ({\r\n//     type: \"deleteContact\",\r\n//     payload: value,\r\n// })\r\n// export const contactsFilter = filter => ({\r\n//     type: 'contactsFilter',\r\n//     payload: filter,\r\n// })\r\nexport const addContact = createAction('addContact', (name,number) => {\r\n    return {\r\n        payload: {\r\n            name: name,\r\n            number: number,\r\n            id: uuidv4(),\r\n        }\r\n    }\r\n}) \r\nexport const deleteContact = createAction('deleteContact');\r\nexport const contactsFilter = createAction('contactsFilter');","import styles from './Filter.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { contactsFilter } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\n  function Filter({ value,contactsFilter}) {\r\n     return <label className = {styles.label}>\r\n                <h3 className = {styles.heading}>Find contacts by name</h3> \r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                autoComplete=\"off\"\r\n                onChange = {contactsFilter}\r\n             className = {styles.input}\r\n         >\r\n            </input>\r\n            </label>\r\n}\r\nFilter.propTypes = {\r\n    filter: PropTypes.string,\r\n    handleFilterChange:PropTypes.func,\r\n}\r\nconst mapDispatchTopProps = dispatch => {\r\n    return {\r\n        contactsFilter : (e) => dispatch(contactsFilter(e.target.value))\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: state.filter,\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchTopProps)(Filter);","\r\nimport ContactForm from \"./components/ContactList/ContactForm/ContactFrom\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport styles from './App.module.css'\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact, deleteContact} from './redux/actions';\r\nfunction PhoneBook({ addContact, deleteContact, contactsArr, filter }) {\r\n  // const getContacts = () => {\r\n  //   const saved = localStorage.getItem('contacts')\r\n  //   const savedArr = JSON.parse(saved);\r\n  //   return contactsArr.push(...savedArr);\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const onChangeInputHandler = (event) => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name': setName(value);\r\n        break;\r\n      case 'number': setNumber(value);\r\n        break;\r\n      default:return\r\n    }\r\n  }\r\n  const addContactHandler = e => {\r\n    if (dublicateAlert(name)) {\r\n      return\r\n    }\r\n    else {\r\n      addContact(name,number)\r\n    }\r\n  }\r\n  const dublicateAlert = (name) => {\r\n    if (contactsArr.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\r\n      alert(`${name} is already in contacts`)\r\n      return true\r\n    }\r\n  }\r\n  const filteredContacts = contactsArr.length > 0 ? contactsArr.filter(contact => {\r\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n  }) : [];\r\n  //   useEffect(() => {\r\n  //   const saved = localStorage.getItem('contacts')\r\n  //   const savedArr = JSON.parse(saved);\r\n  //   return contactsArr.push(...savedArr);\r\n  // }, []);\r\n  return <>\r\n    <h1 className={styles.heading} >PhoneBook</h1>\r\n    <ContactForm\r\n      onChangeInputHandler={onChangeInputHandler}\r\n      addContactHandler={addContactHandler}\r\n    />\r\n     <h3 className={styles.heading}>Contacts</h3>\r\n    <Filter\r\n    />\r\n   <ContactList\r\n      filteredContacts={filteredContacts}\r\n      deleteContact={deleteContact}\r\n    />\r\n  </>\r\n}\r\nconst mapDispatchTopProps = dispatch => {\r\n  return {\r\n    addContact: (name, number) => dispatch(addContact(name, number)),\r\n    deleteContact: (id) => dispatch(deleteContact(id)),\r\n  }\r\n}\r\nconst mapStateToProps = ({contacts,filter}) => {\r\n  return {\r\n    contactsArr: contacts.contacts,\r\n    filter : filter,\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchTopProps)(PhoneBook);","import { applyMiddleware, combineReducers } from \"redux\";\r\n\r\nimport { getDefaultMiddleware , configureStore, createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { addContact, contactsFilter, deleteContact } from \"./actions\";\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n}\r\n// const contactsList = (state = [...savedArr], { type, payload }) => {\r\n//     switch (type) {\r\n//         case 'addContact': return  [...state, payload]\r\n                \r\n//         case 'deleteContact': return state.filter(contact => contact.id !== payload)\r\n//         default: return state;\r\n            \r\n//     };\r\n// }\r\n// const contactsFilter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case 'contactsFilter': return  payload;\r\n\r\n//         default: return state;\r\n//      }\r\n// }\r\n// const contactsReducer = combineReducers({\r\n//     contacts: contactsList,\r\n//     filter: contactsFilter,\r\n// });\r\n// const store = createStore(contactsReducer, composeWithDevTools(\r\n//     applyMiddleware()));\r\nconst contactsList = createReducer([], {\r\n    [addContact]: (state, {payload}) => [...state,payload],\r\n    [deleteContact]: (state,{payload}) => state.filter(contact => contact.id !== payload)\r\n})\r\nconst filter = createReducer('', {\r\n    [contactsFilter]: (_, { payload }) => payload,\r\n})\r\nconst persistedReducer = persistReducer(persistConfig, combineReducers({\r\n    contacts: contactsList,\r\n}))\r\nconst store = configureStore({\r\n    reducer: {\r\n    contacts: persistedReducer,\r\n    filter: filter,\r\n    },\r\n    middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\nconst persistor = persistStore(store);\r\nexport default { store, persistor };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PhoneBook from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { PersistGate } from 'redux-persist/es/integration/react';\r\n// store.dispatch(addContact('alex', '123456'))\r\n// console.log(store.dispatch(addContact('alex', '123456')))\r\n// console.log(store.dispatch(addContact('alex2','123456')))\r\n\r\nReactDOM.render(<Provider store={store.store}><PersistGate loading ={null} persistor = {store.persistor}><PhoneBook/></PersistGate></Provider>,document.querySelector('#root'))\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1PRJS\",\"button\":\"ContactForm_button__1UAI9\",\"input\":\"ContactForm_input__3TzFP\"};"],"sourceRoot":""}